{"version":3,"sources":["helpers/apollo.ts","queries/Preview.tsx","css/_globals.ts","css/grid.ts","css/text.ts","views/PokemonDetail/PreviewCard.tsx","css/index.ts","helpers/hooks.ts","views/PokemonDetail/Selectotron.tsx","components/Fillbar.tsx","views/PokemonDetail/Stats.tsx","views/PokemonDetail/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["makeQuery","query","useQuery","params","hooks","QUERY","gql","_templateObject","cssRule","boxSizing","margin","objectFit","HALF_GUTTER","row","style","marginLeft","px","marginRight","display","column","size","arguments","length","undefined","paddingLeft","paddingRight","flexGrow","flexShrink","flexBasis","concat","fixedColumn","width","align","textAlign","className","position","background","imageClass","transition","height","border","filter","$nest","&:hover, &.active","numberClass","top","right","padding","boxShadow","PreviewCard","props","react","active","src","imgUrl","num","Placeholder","visibility","useKeyDown","key","func","name","target","window","React","addEventListener","removeEventListener","useEventListener","event","KeyboardEvent","maxWidth","overflowX","selectorClass","pointerEvents","Selectotron","selectPrev","preventDefault","selectNext","_React$useState","_React$useState2","Object","slicedToArray","selectorStyle","setSelectorStyle","selectedChild","el","current","left","offsetLeft","clientWidth","clientHeight","scrollIntoView","selected","children","map","child","i","ref","textClass","textShadow","fontWeight","barClass","bottom","backgroundColor","zIndex","Fillbar","percent","Math","min","max","Stats_templateObject","Stats","_useQuery","variables","identifier","data","error","loading","Pokemon","edges","node","stats","compact","pokemonStats","stat","css","id","startCase","baseStat","PokemonDetail","number","match","_Preview$useQuery","Preview","first","ceil","pokemons","selectedPokemon","react_default","a","createElement","history","push","pokemon","Link","cursor","to","PokemonDetail_PreviewCard","sprites","normal","male","front","App","BrowserRouter","Switch","Route","path","component","Redirect","exact","from","Boolean","location","hostname","client","ApolloClient","uri","ReactDOM","render","ApolloContext","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8eeeb108.chunk.js","sourcesContent":["export { gql } from \"apollo-boost\";\nimport * as hooks from \"react-apollo-hooks\";\n\nexport function makeQuery<TData, TVariables>(query: any) {\n  function useQuery(params: hooks.QueryHookOptions<TVariables>) {\n    return hooks.useQuery<TData, TVariables>(query, params);\n  }\n  useQuery.QUERY = query;\n  return useQuery;\n}\n","import { gql, makeQuery } from \"../helpers/apollo\";\nimport * as T from \"./__generated__/Preview\";\n\nexport function pad(num: number) {\n  return Math.ceil(num / 100) * 100;\n}\n\nexport const useQuery = makeQuery<T.Preview, T.PreviewVariables>(\n  gql`\n    query Preview($first: Int, $after: String) {\n      Pokemon(first: $first, after: $after) {\n        totalCount\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            id\n            identifier\n            sprites {\n              normal {\n                male {\n                  front\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `\n);\n","import { cssRule } from \"typestyle\";\n\ncssRule(\"*\", {\n  boxSizing: \"border-box\"\n});\n\ncssRule(\"figure\", {\n  margin: 0\n});\n\ncssRule(\"img\", {\n  objectFit: \"contain\"\n});\n","import { style } from \"typestyle\";\nimport { px } from \"csx\";\n\nconst HALF_GUTTER = 8;\n\nexport function row() {\n  return style({\n    marginLeft: px(-HALF_GUTTER),\n    marginRight: px(-HALF_GUTTER),\n    display: \"flex\"\n  });\n}\n\nexport function column(size = 1) {\n  return style({\n    paddingLeft: px(HALF_GUTTER),\n    paddingRight: px(HALF_GUTTER),\n    flexGrow: size,\n    flexShrink: size,\n    flexBasis: `${size / 12 * 100}%`\n  });\n}\n\nexport function fixedColumn(width = \"auto\") {\n  return style({\n    paddingLeft: px(HALF_GUTTER),\n    paddingRight: px(HALF_GUTTER),\n    flexGrow: 0,\n    flexShrink: 0,\n    flexBasis: width\n  });\n}\n","import { style } from \"typestyle\";\n\nexport function align(textAlign: \"left\" | \"center\" | \"right\") {\n  return style({ textAlign });\n}\n","import * as React from \"react\";\nimport { style } from \"typestyle\";\nimport * as css from \"../../css\";\n\nconst className = style({\n  position: \"relative\",\n  background: \"white\",\n});\n\nconst imageClass = style({\n  display: \"block\",\n  transition: \"0.2s ease all\",\n  width: \"96px\",\n  height: \"96px\",\n  border: \"1px solid black\",\n  filter: \"brightness(0.8) grayscale(1)\",\n  $nest: {\n    \"&:hover, &.active\": {\n      filter: \"none\"\n    }\n  }\n});\n\nconst numberClass = style({\n  position: \"absolute\",\n  top: \"0\",\n  right: \"0\",\n  padding: \"4px 6px\",\n  background: \"rgba(255, 255, 255, 0.5)\",\n  boxShadow: \"0 0 0 1px rgba(0, 0, 0, 0.5)\"\n});\n\nfunction PreviewCard(props: { num: string; imgUrl: string; active: boolean }) {\n  return (\n    <figure className={className}>\n      <img\n        className={`${imageClass} ${props.active && \"active\"}`}\n        src={props.imgUrl}\n      />\n      <figcaption className={numberClass}>{props.num}</figcaption>\n    </figure>\n  );\n}\n\nPreviewCard.Placeholder = () => {\n  return <figure className={`${className} ${css.hidden()}`} />;\n};\n\nexport default PreviewCard;\n","import \"./_globals\";\nimport { style } from \"typestyle\";\n\nimport * as align from \"./align\";\nimport * as grid from \"./grid\";\nimport * as text from \"./text\";\n\nexport { align, grid, text };\n\nexport function hidden() {\n  return style({ visibility: \"hidden\" });\n}\n","import * as React from \"react\";\n\nexport function useEventListener(\n  name: string,\n  func: (event: Event) => void,\n  target: EventTarget = window\n) {\n  React.useEffect(() => {\n    target.addEventListener(name, func);\n    return () => target.removeEventListener(name, func);\n  });\n}\n\nexport function useKeyDown(key: string, func: (event: Event) => any) {\n  useEventListener(\"keydown\", event => {\n    if (event instanceof KeyboardEvent && event.key === key) {\n      func(event);\n    }\n  });\n}\n","import * as React from \"react\";\nimport { style } from \"typestyle\";\nimport { useKeyDown } from \"../../helpers/hooks\";\n\nconst className = style({\n  position: \"relative\",\n  background: \"black\",\n  maxWidth: \"100%\",\n  overflowX: \"scroll\",\n  display: \"flex\"\n});\n\nconst selectorClass = style({\n  position: \"absolute\",\n  pointerEvents: \"none\",\n  boxShadow: \"inset 0 0 0 3px black\",\n  visibility: \"hidden\"\n});\n\nexport default function Selectotron(props: {\n  selected: number;\n  children: React.ReactElement[];\n  selectPrev?: () => any;\n  selectNext?: () => any;\n}) {\n  useKeyDown(\"ArrowLeft\", event => {\n    if (props.selectPrev) {\n      props.selectPrev();\n      event.preventDefault();\n    }\n  });\n  useKeyDown(\"ArrowRight\", event => {\n    if (props.selectNext) {\n      props.selectNext();\n      event.preventDefault();\n    }\n  });\n  const [selectorStyle, setSelectorStyle] = React.useState({});\n  const selectedChild = React.useRef<HTMLDivElement>(null);\n  React.useEffect(() => {\n    const el = selectedChild.current;\n    if (el != null) {\n      setSelectorStyle({\n        visibility: \"visible\",\n        transition: \"0.4s ease-out left\",\n        left: `${el.offsetLeft}px`,\n        width: `${el.clientWidth}px`,\n        height: `${el.clientHeight}px`\n      });\n\n      el.scrollIntoView();\n    }\n  }, [props.selected, selectedChild.current]);\n\n  return (\n    <div className={className}>\n      {props.children.map((child, i) => (\n        <div\n          key={child.key || i}\n          ref={i === props.selected ? selectedChild : null}\n        >\n          {child}\n        </div>\n      ))}\n      <div className={selectorClass} style={selectorStyle} />\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { style } from \"typestyle\";\n\nconst className = style({\n  position: \"relative\",\n});\n\nconst textClass = style({\n  display: \"inline-block\",\n  width: \"40px\",\n  textAlign: \"right\",\n  textShadow: \"0 0 2px white\",\n  fontWeight: 600\n})\n\nconst barClass = style({\n  position: \"absolute\",\n  left: 0,\n  top: 0,\n  bottom: 0,\n  backgroundColor: \"lightgreen\",\n  zIndex: -1\n});\n\nexport default function Fillbar(props: { size: number; max: number }) {\n  const percent = Math.min(props.size / props.max, 1) * 100;\n  return (\n    <div className={className}>\n      <span className={textClass}>{props.size}</span>\n      <div className={barClass} style={{ width: `${percent}%` }} />\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { compact, startCase } from \"lodash\";\nimport * as T from \"./__generated__/PokemonStats\";\nimport { gql, makeQuery } from \"../../helpers/apollo\";\nimport Fillbar from \"../../components/Fillbar\";\nimport * as css from \"../../css\";\n\nconst useQuery = makeQuery<T.PokemonStats, T.PokemonStatsVariables>(gql`\n  query PokemonStats($identifier: String) {\n    Pokemon(filter: { identifier: $identifier }) {\n      edges {\n        node {\n          id\n          identifier\n          pokemonStats {\n            id\n            baseStat\n            stat {\n              id\n              identifier\n            }\n          }\n        }\n      }\n    }\n  }\n`);\n\nexport default function(props: { identifier: string }) {\n  const { data, error, loading } = useQuery({\n    variables: { identifier: props.identifier }\n  });\n\n  if (\n    !data ||\n    !data.Pokemon ||\n    !data.Pokemon.edges ||\n    !data.Pokemon.edges[0] ||\n    !data.Pokemon.edges[0]!.node\n  ) {\n    return null;\n  }\n\n  const stats = compact(data.Pokemon.edges[0]!.node.pokemonStats);\n  if (!stats.length) {\n    return null;\n  }\n\n  return (\n    <div>\n      {stats.map((stat, i) => (\n        <div className={css.grid.row()} key={stat.id || i}>\n          <div\n            className={`${css.grid.fixedColumn(\"140px\")} ${css.text.align(\n              \"right\"\n            )}`}\n          >\n            {startCase(stat.stat!.identifier!)}\n          </div>\n          <div className={css.grid.column()}>\n            <Fillbar max={150} size={stat.baseStat || 0} />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n// import * as T from \"./__generated__/PokemonDetail\";\nimport { Link } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n// import { gql, makeQuery } from \"../helpers/apollo\";\nimport * as Preview from \"../../queries/Preview\";\nimport PreviewCard from \"./PreviewCard\";\nimport { compact, startCase } from \"lodash\";\nimport Selectotron from \"./Selectotron\";\nimport Stats from \"./Stats\";\n\n// const useQuery = makeQuery<T.PokemonDetail, T.PokemonDetailVariables>(gql`\n//   query PokemonDetail($id: String!) {\n//     pokemon(id: $id) {\n//       id\n//       number\n//       name\n//       classification\n//       types\n//       resistant\n//       weaknesses\n//       image\n//     }\n//   }\n// `);\n\nexport default function PokemonDetail(\n  props: RouteComponentProps<{ number: string }>\n) {\n  const number = props.match.params.number;\n  const { data, error, loading } = Preview.useQuery({\n    variables: { first: Preview.pad(+number + 1) }\n  });\n  if (!data || !data.Pokemon) {\n    return null;\n  }\n\n  const pokemons = compact(data.Pokemon.edges);\n  if (pokemons == null) {\n    return null;\n  }\n\n  const selected = +number - 1;\n  const selectedPokemon = pokemons[selected].node!;\n\n  return (\n    <div>\n      <Selectotron\n        selected={selected}\n        selectPrev={() => props.history.push(`/pokemon/${+number - 1}`)}\n        selectNext={() => props.history.push(`/pokemon/${+number + 1}`)}\n      >\n        {pokemons.map((pokemon, i) =>\n          pokemon && pokemon.node ? (\n            <Link key={pokemon.cursor} to={`/pokemon/${pokemon.node.id}`}>\n              <PreviewCard\n                num={pokemon.node.id!}\n                active={i == selected}\n                imgUrl={pokemon.node.sprites!.normal!.male!.front!}\n              />\n            </Link>\n          ) : (\n            <PreviewCard.Placeholder key={i} />\n          )\n        )}\n      </Selectotron>\n      <h2>{startCase(selectedPokemon.identifier!)}</h2>\n      <Stats identifier={selectedPokemon.identifier!} />\n    </div>\n  );\n}\n","import * as React from \"react\";\n// import PokemonPreview from \"./views/PokemonPreview\";\nimport PokemonDetail from \"./views/PokemonDetail\";\nimport { BrowserRouter as Router, Route, Switch, Link, Redirect } from \"react-router-dom\";\n\nexport function App() {\n  return (\n    <Router>\n      <main>\n        <Link to=\"/\">Pokemon!</Link>\n        <Switch>\n          <Route path=\"/pokemon/:number\" component={PokemonDetail} />\n          <Redirect exact from=\"/\" to=\"/pokemon/001\" />\n          {/* <Route path=\"/\" component={PokemonPreview} /> */}\n        </Switch>\n      </main>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo-hooks\";\n\nconst client = new ApolloClient({\n  uri: \"https://pokeql.com/v1\"\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
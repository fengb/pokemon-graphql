{"version":3,"sources":["App/Apollo.tsx","helpers/apollo.ts","queries/Preview.tsx","css/_globals.ts","css/grid.ts","css/text.ts","views/PokemonDetail/PreviewCard.tsx","css/index.ts","components/Follower.tsx","helpers/hooks.ts","views/PokemonDetail/Selectotron.tsx","components/Fillbar.tsx","views/PokemonDetail/Stats.tsx","views/PokemonDetail/index.tsx","App/Router.tsx","App/index.tsx","serviceWorker.ts","index.tsx"],"names":["client","ApolloClient","uri","Apollo","props","react","ApolloContext","children","makeQuery","query","useQuery","params","hooks","QUERY","gql","_templateObject","cssRule","boxSizing","margin","objectFit","HALF_GUTTER","row","style","marginLeft","px","marginRight","display","column","size","arguments","length","undefined","paddingLeft","paddingRight","flexGrow","flexShrink","flexBasis","percent","round","align","textAlign","CLASSES","root","position","background","image","transition","width","height","border","filter","$nest","&:hover, &.active","number","top","right","padding","boxShadow","PreviewCard","className","concat","active","src","imgUrl","num","Placeholder","visibility","Follower","_React$useState","React","_React$useState2","Object","slicedToArray","setStyle","target","left","offsetLeft","offsetTop","clientWidth","clientHeight","onChange","useKeyDown","key","func","name","window","addEventListener","removeEventListener","useEventListener","event","KeyboardEvent","maxWidth","overflowX","selector","pointerEvents","Selectotron","selectPrev","preventDefault","selectNext","selectedChild","initial","setState","ref","current","useForcedRef","map","child","i","selected","el","scrollIntoView","text","textShadow","fontWeight","bar","bottom","backgroundColor","zIndex","Fillbar","Math","min","max","barColor","Stats_templateObject","Stats","_useQuery","variables","identifier","data","error","loading","Pokemon","edges","node","stats","compact","pokemonStats","stat","css","id","startCase","baseStat","value","PokemonDetail","match","_Preview$useQuery","Preview","first","ceil","pokemons","selectedPokemon","react_default","a","createElement","history","replace","pokemon","Link","cursor","to","PokemonDetail_PreviewCard","sprites","normal","male","front","Routes","Switch","Route","path","component","Redirect","exact","from","App","es","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8a95b25a.chunk.js","sourcesContent":["import * as React from \"react\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo-hooks\";\n\nconst client = new ApolloClient({\n  uri: \"https://pokeql.com/v1\"\n});\n\nexport default function Apollo(props: { children: React.ReactNode }) {\n  return <ApolloProvider client={client}>{props.children}</ApolloProvider>;\n}\n","export { gql } from \"apollo-boost\";\nimport * as hooks from \"react-apollo-hooks\";\n\nexport function makeQuery<TData, TVariables>(query: any) {\n  function useQuery(params: hooks.QueryHookOptions<TVariables>) {\n    return hooks.useQuery<TData, TVariables>(query, params);\n  }\n  useQuery.QUERY = query;\n  return useQuery;\n}\n","import { gql, makeQuery } from \"../helpers/apollo\";\nimport * as T from \"./__generated__/Preview\";\n\nexport function pad(num: number) {\n  return Math.ceil(num / 100) * 100;\n}\n\nexport const useQuery = makeQuery<T.Preview, T.PreviewVariables>(\n  gql`\n    query Preview($first: Int, $after: String) {\n      Pokemon(first: $first, after: $after) {\n        totalCount\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        edges {\n          cursor\n          node {\n            id\n            identifier\n            sprites {\n              normal {\n                male {\n                  front\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `\n);\n","import { cssRule } from \"typestyle\";\n\ncssRule(\"*\", {\n  boxSizing: \"border-box\"\n});\n\ncssRule(\"figure\", {\n  margin: 0\n});\n\ncssRule(\"img\", {\n  objectFit: \"contain\"\n});\n","import { style } from \"typestyle\";\nimport { px, percent } from \"csx\";\nimport { round } from \"lodash\";\n\nconst HALF_GUTTER = 8;\n\nexport function row() {\n  return style({\n    marginLeft: px(-HALF_GUTTER),\n    marginRight: px(-HALF_GUTTER),\n    display: \"flex\"\n  });\n}\n\ntype ColumnSize = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12;\nexport function column(size: ColumnSize | string = \"dynamic\") {\n  if (size === \"dynamic\") {\n    return style({\n      paddingLeft: px(HALF_GUTTER),\n      paddingRight: px(HALF_GUTTER),\n      flexGrow: 1,\n      flexShrink: 1,\n      flexBasis: 0\n    });\n  } else {\n    return style({\n      paddingLeft: px(HALF_GUTTER),\n      paddingRight: px(HALF_GUTTER),\n      flexGrow: 0,\n      flexShrink: 0,\n      flexBasis:\n        typeof size === \"string\" ? size : percent(round((100 * size) / 12, 4))\n    });\n  }\n}\n","import { style } from \"typestyle\";\n\nexport function align(textAlign: \"left\" | \"center\" | \"right\") {\n  return style({ textAlign });\n}\n","import * as React from \"react\";\nimport { style } from \"typestyle\";\nimport * as css from \"../../css\";\n\nconst CLASSES = {\n  root: style({\n    position: \"relative\",\n    background: \"white\"\n  }),\n\n  image: style({\n    display: \"block\",\n    transition: \"0.2s ease all\",\n    width: \"96px\",\n    height: \"96px\",\n    border: \"1px solid black\",\n    filter: \"brightness(0.8) grayscale(1)\",\n    $nest: {\n      \"&:hover, &.active\": {\n        filter: \"none\"\n      }\n    }\n  }),\n\n  number: style({\n    position: \"absolute\",\n    top: \"0\",\n    right: \"0\",\n    padding: \"4px 6px\",\n    background: \"rgba(255, 255, 255, 0.5)\",\n    boxShadow: \"0 0 0 1px rgba(0, 0, 0, 0.5)\"\n  })\n};\n\nfunction PreviewCard(props: { num: string; imgUrl: string; active: boolean }) {\n  return (\n    <figure className={CLASSES.root}>\n      <img\n        className={`${CLASSES.image} ${props.active && \"active\"}`}\n        src={props.imgUrl}\n      />\n      <figcaption className={CLASSES.number}>{props.num}</figcaption>\n    </figure>\n  );\n}\n\nPreviewCard.Placeholder = () => {\n  return <figure className={`${CLASSES.root} ${css.hidden()}`} />;\n};\n\nexport default PreviewCard;\n","import \"./_globals\";\nimport { style } from \"typestyle\";\n\nimport * as align from \"./align\";\nimport * as grid from \"./grid\";\nimport * as text from \"./text\";\n\nexport { align, grid, text };\n\nexport function hidden() {\n  return style({ visibility: \"hidden\" });\n}\n","import * as React from \"react\";\nimport { style } from \"typestyle\";\n\nconst CLASSES = {\n  root: style({\n    position: \"absolute\",\n    visibility: \"hidden\"\n  })\n};\n\nexport default function Follower(props: {\n  target: HTMLElement | null;\n  className?: string;\n  onChange?: (el: HTMLElement) => any;\n}) {\n  const [style, setStyle] = React.useState({});\n  React.useLayoutEffect(() => {\n    if (props.target != null) {\n      setStyle({\n        visibility: \"visible\",\n        left: `${props.target.offsetLeft}px`,\n        top: `${props.target.offsetTop}px`,\n        width: `${props.target.clientWidth}px`,\n        height: `${props.target.clientHeight}px`\n      });\n\n      props.onChange && props.onChange(props.target);\n    }\n  }, [props.target]);\n\n  return <div className={`${CLASSES.root} ${props.className}`} style={style} />;\n}\n","import * as React from \"react\";\n\nexport function useEventListener(\n  name: string,\n  func: (event: Event) => void,\n  target: EventTarget = window\n) {\n  React.useEffect(() => {\n    target.addEventListener(name, func);\n    return () => target.removeEventListener(name, func);\n  });\n}\n\nexport function useKeyDown(key: string, func: (event: Event) => any) {\n  useEventListener(\"keydown\", event => {\n    if (event instanceof KeyboardEvent && event.key === key) {\n      func(event);\n    }\n  });\n}\n\n/**\n * useRef will not trigger an update. This desyncs if the ref has been reassigned in the render.\n * useForcedRef will update until the ref is settled. Note: it's possible to infinite loop.\n */\nexport function useForcedRef<T>(initial = null) {\n  const [, setState] = React.useState<T | null>(initial);\n  const ref = React.useRef<T>(initial);\n  React.useEffect(() => {\n    // setState will trigger update iff current changed. This should settle on next render loop.\n    setState(ref.current);\n  });\n  return ref;\n}\n","import * as React from \"react\";\nimport { style } from \"typestyle\";\nimport Follower from \"../../components/Follower\";\nimport { useKeyDown, useForcedRef } from \"../../helpers/hooks\";\n\nconst CLASSES = {\n  root: style({\n    position: \"relative\",\n    background: \"black\",\n    maxWidth: \"100%\",\n    overflowX: \"scroll\",\n    display: \"flex\"\n  }),\n\n  selector: style({\n    pointerEvents: \"none\",\n    boxShadow: \"inset 0 0 0 3px black\",\n    transition: \"0.3s ease left\"\n  })\n};\n\nexport default function Selectotron(props: {\n  selected: number;\n  children: React.ReactElement[];\n  selectPrev?: () => any;\n  selectNext?: () => any;\n}) {\n  useKeyDown(\"ArrowLeft\", event => {\n    if (props.selectPrev) {\n      props.selectPrev();\n      event.preventDefault();\n    }\n  });\n  useKeyDown(\"ArrowRight\", event => {\n    if (props.selectNext) {\n      props.selectNext();\n      event.preventDefault();\n    }\n  });\n  const selectedChild = useForcedRef<HTMLDivElement>(null);\n\n  return (\n    <div className={CLASSES.root}>\n      {props.children.map((child, i) => (\n        <div\n          key={child.key || i}\n          ref={i === props.selected ? selectedChild : null}\n        >\n          {child}\n        </div>\n      ))}\n      <Follower\n        className={CLASSES.selector}\n        target={selectedChild.current}\n        onChange={(el: HTMLElement) => el.scrollIntoView()}\n      />\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { chain } from \"lodash\";\nimport { style } from \"typestyle\";\n\nconst CLASSES = {\n  root: style({\n    position: \"relative\"\n  }),\n\n  text: style({\n    display: \"inline-block\",\n    width: \"40px\",\n    textAlign: \"right\",\n    textShadow: \"0 0 2px white\",\n    fontWeight: 600\n  }),\n\n  bar: style({\n    position: \"absolute\",\n    left: 0,\n    top: 0,\n    bottom: 0,\n    backgroundColor: \"lightgray\",\n    zIndex: -1\n  })\n};\n\nexport default function Fillbar(props: {\n  size: number;\n  max: number;\n  barColor?: string;\n}) {\n  const percent = Math.min(props.size / props.max, 1) * 100;\n  return (\n    <div className={CLASSES.root}>\n      <span className={CLASSES.text}>{props.size}</span>\n      <div\n        className={CLASSES.bar}\n        style={{ width: `${percent}%`, backgroundColor: props.barColor }}\n      />\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { compact, startCase } from \"lodash\";\nimport * as T from \"./__generated__/PokemonStats\";\nimport { gql, makeQuery } from \"../../helpers/apollo\";\nimport Fillbar from \"../../components/Fillbar\";\nimport * as css from \"../../css\";\n\nconst useQuery = makeQuery<T.PokemonStats, T.PokemonStatsVariables>(gql`\n  query PokemonStats($identifier: String) {\n    Pokemon(filter: { identifier: $identifier }) {\n      edges {\n        node {\n          id\n          identifier\n          pokemonStats {\n            id\n            baseStat\n            stat {\n              id\n              identifier\n            }\n          }\n        }\n      }\n    }\n  }\n`);\n\nfunction colorFor(value: number) {\n  if (value >= 150) {\n    return \"blue\";\n  } else if (value >= 100) {\n    return \"green\";\n  } else if (value >= 75) {\n    return \"yellow\";\n  } else if (value >= 50) {\n    return \"orange\";\n  } else {\n    return \"red\";\n  }\n}\n\nexport default function Stats(props: { identifier: string }) {\n  const { data, error, loading } = useQuery({\n    variables: { identifier: props.identifier }\n  });\n\n  if (\n    !data ||\n    !data.Pokemon ||\n    !data.Pokemon.edges ||\n    !data.Pokemon.edges[0] ||\n    !data.Pokemon.edges[0]!.node\n  ) {\n    return null;\n  }\n\n  const stats = compact(data.Pokemon.edges[0]!.node.pokemonStats);\n  if (!stats.length) {\n    return null;\n  }\n\n  return (\n    <div>\n      {stats.map((stat, i) => (\n        <div className={css.grid.row()} key={stat.id || i}>\n          <div\n            className={`${css.grid.column(\"140px\")} ${css.text.align(\"right\")}`}\n          >\n            {startCase(stat.stat!.identifier!)}\n          </div>\n          <div className={css.grid.column()}>\n            <Fillbar\n              max={150}\n              size={stat.baseStat || 0}\n              barColor={colorFor(stat.baseStat || 0)}\n            />\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import React from \"react\";\n// import * as T from \"./__generated__/PokemonDetail\";\nimport { Link } from \"react-router-dom\";\nimport { RouteComponentProps } from \"react-router\";\n// import { gql, makeQuery } from \"../helpers/apollo\";\nimport * as Preview from \"../../queries/Preview\";\nimport PreviewCard from \"./PreviewCard\";\nimport { compact, startCase } from \"lodash\";\nimport Selectotron from \"./Selectotron\";\nimport Stats from \"./Stats\";\n\n// const useQuery = makeQuery<T.PokemonDetail, T.PokemonDetailVariables>(gql`\n//   query PokemonDetail($id: String!) {\n//     pokemon(id: $id) {\n//       id\n//       number\n//       name\n//       classification\n//       types\n//       resistant\n//       weaknesses\n//       image\n//     }\n//   }\n// `);\n\nexport default function PokemonDetail(\n  props: RouteComponentProps<{ number: string }>\n) {\n  const number = props.match.params.number;\n  const { data, error, loading } = Preview.useQuery({\n    variables: { first: Preview.pad(+number + 1) }\n  });\n  if (!data || !data.Pokemon) {\n    return null;\n  }\n\n  const pokemons = compact(data.Pokemon.edges);\n  if (pokemons == null) {\n    return null;\n  }\n\n  const selected = +number - 1;\n  const selectedPokemon = pokemons[selected].node!;\n\n  return (\n    <div>\n      <Selectotron\n        selected={selected}\n        selectPrev={() => props.history.replace(`/pokemon/${+number - 1}`)}\n        selectNext={() => props.history.replace(`/pokemon/${+number + 1}`)}\n      >\n        {pokemons.map((pokemon, i) =>\n          pokemon && pokemon.node ? (\n            <Link key={pokemon.cursor} to={`/pokemon/${pokemon.node.id}`}>\n              <PreviewCard\n                num={pokemon.node.id!}\n                active={i == selected}\n                imgUrl={pokemon.node.sprites!.normal!.male!.front!}\n              />\n            </Link>\n          ) : (\n            <PreviewCard.Placeholder key={i} />\n          )\n        )}\n      </Selectotron>\n      <h2>{startCase(selectedPokemon.identifier!)}</h2>\n      <Stats identifier={selectedPokemon.identifier!} />\n    </div>\n  );\n}\n","import * as React from \"react\";\nimport { Route, Redirect, Switch } from \"react-router-dom\";\nimport PokemonDetail from \"../views/PokemonDetail\";\n\nexport { Link, HashRouter as default } from \"react-router-dom\";\n\nexport function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/pokemon/:number\" component={PokemonDetail} />\n      <Redirect exact from=\"/\" to=\"/pokemon/1\" />\n    </Switch>\n  );\n}\n","import * as React from \"react\";\nimport Apollo from \"./Apollo\";\nimport Router, { Routes, Link } from \"./Router\";\n\nexport function App() {\n  return (\n    <main>\n      <Link to=\"/\">Pokemon!</Link>\n      <Routes />\n    </main>\n  );\n}\n\nexport default function() {\n  return (\n    <Apollo>\n      <Router>\n        <App />\n      </Router>\n    </Apollo>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}